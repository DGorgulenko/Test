{
	"info": {
		"_postman_id": "8c1fd61a-d8d9-48cf-aa70-073ff5607c13",
		"name": "Order Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Const",
			"item": [
				{
					"name": "Returns all possible statuses for delivery job.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e47ea4e7-e69b-46e8-b305-5848a6272345",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"",
									"//Check that all required statuses are present",
									"tests[\"Body matches UNDER_REVIEW\"] = responseBody.has(\"UNDER_REVIEW\");",
									"tests[\"Body matches AWAITING_INPUT\"] = responseBody.has(\"AWAITING_INPUT\");",
									"tests[\"Body matches AWAITING_SOURCES\"] = responseBody.has(\"AWAITING_SOURCES\");",
									"tests[\"Body matches RECEIVED\"] = responseBody.has(\"RECEIVED\");",
									"tests[\"Body matches REJECTED\"] = responseBody.has(\"REJECTED\");",
									"tests[\"Body matches IN_PROGRESS\"] = responseBody.has(\"IN_PROGRESS\");",
									"tests[\"Body matches COMPLETED\"] = responseBody.has(\"COMPLETED\");",
									"tests[\"Body matches CANCELED\"] = responseBody.has(\"CANCELED\");",
									"tests[\"Body matches FAILED\"] = responseBody.has(\"FAILED\");",
									"tests[\"Body matches RETRYING\"] = responseBody.has(\"RETRYING\");",
									"",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 7 statuses\"] = jsonData.length === 10;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/deliveryjob/status",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"deliveryjob",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all possible stages for delivery job.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "218ed869-ba7c-488c-9c61-383df3ab12a5",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"",
									"//Check that all required statuses are present",
									"tests[\"Body matches PENDING\"] = responseBody.has(\"PENDING\");",
									"tests[\"Body matches DISCOVERY\"] = responseBody.has(\"DISCOVERY\");",
									"tests[\"Body matches RESOLVING_MATERIALS\"] = responseBody.has(\"RESOLVING_MATERIALS\");",
									"tests[\"Body matches AWAITING_SOURCES\"] = responseBody.has(\"AWAITING_SOURCES\");",
									"tests[\"Body matches READY_FOR_PROCESSING\"] = responseBody.has(\"READY_FOR_PROCESSING\");",
									"tests[\"Body matches PROCESSING\"] = responseBody.has(\"PROCESSING\");",
									"tests[\"Body matches READY_FOR_PACKAGING\"] = responseBody.has(\"READY_FOR_PACKAGING\");",
									"tests[\"Body matches PACKAGING\"] = responseBody.has(\"PACKAGING\");",
									"tests[\"Body matches READY_FOR_DELIVERY\"] = responseBody.has(\"READY_FOR_DELIVERY\");",
									"tests[\"Body matches DELIVERING\"] = responseBody.has(\"DELIVERING\");",
									"tests[\"Body matches DELIVERED\"] = responseBody.has(\"DELIVERED\");",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 7 statuses\"] = jsonData.length === 11;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/deliveryjob/stage",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"deliveryjob",
								"stage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all possible cancellation reasons for order.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76b6fc1a-65b2-4f79-baba-e17951e2ebae",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"//Check that all required statuses are present",
									"tests[\"Body matches LICENSING_ISSUE\"] = responseBody.has(\"LICENSING_ISSUE\");",
									"tests[\"Body matches ALTERNATE_DELIVERY\"] = responseBody.has(\"ALTERNATE_DELIVERY\");",
									"tests[\"Body matches INCORRECT_TITLE\"] = responseBody.has(\"INCORRECT_TITLE\");",
									"tests[\"Body matches INVALID_ORDER_DATA\"] = responseBody.has(\"INVALID_ORDER_DATA\");",
									"",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 7 statuses\"] = jsonData.length === 4;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/order/cancellationReason",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"order",
								"cancellationReason"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all possible statuses for deliverable.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18de0cba-8d87-4d98-bca8-967dcde3dd49",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"",
									"//Check that all required statuses are present",
									"tests[\"Body matches PENDING\"] = responseBody.has(\"PENDING\");",
									"tests[\"Body matches IN_PROGRESS\"] = responseBody.has(\"IN_PROGRESS\");",
									"tests[\"Body matches COMPLETED\"] = responseBody.has(\"COMPLETED\");",
									"tests[\"Body matches CANCELED\"] = responseBody.has(\"CANCELED\");",
									"tests[\"Body matches FAILED\"] = responseBody.has(\"FAILED\");",
									"",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 7 statuses\"] = jsonData.length === 5;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/deliverable/status",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"deliverable",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all possible delivery types for delivery job.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "323c317b-48cb-4182-9d30-bf5815e0e075",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"",
									"//Check that all required statuses are present",
									"tests[\"Body matches AUTOMATIC\"] = responseBody.has(\"AUTOMATIC\");",
									"tests[\"Body matches MANUAL_PASS_THROUGH\"] = responseBody.has(\"MANUAL_PASS_THROUGH\");",
									"tests[\"Body matches TRANSCODE_PASS_THROUGH\"] = responseBody.has(\"TRANSCODE_PASS_THROUGH\");",
									"",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 7 statuses\"] = jsonData.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/deliveryjob/type",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"deliveryjob",
								"type"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all possible stages for deliverable.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2c76627-b1cc-4f2e-97a3-fc876c5b9c70",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"",
									"//Check that all required statuses are present",
									"tests[\"Body matches NOT_YET_STARTED\"] = responseBody.has(\"NOT_YET_STARTED\");",
									"tests[\"Body matches AWAITING_SOURCES\"] = responseBody.has(\"AWAITING_SOURCES\");",
									"tests[\"Body matches READY_FOR_TRANSCODING\"] = responseBody.has(\"READY_FOR_TRANSCODING\");",
									"tests[\"Body matches TRANSCODING\"] = responseBody.has(\"TRANSCODING\");",
									"tests[\"Body matches READY_FOR_PACKAGING\"] = responseBody.has(\"READY_FOR_PACKAGING\");",
									"tests[\"Body matches PACKAGING\"] = responseBody.has(\"PACKAGING\");",
									"tests[\"Body matches READY_FOR_DELIVERY\"] = responseBody.has(\"READY_FOR_DELIVERY\");",
									"tests[\"Body matches DELIVERING\"] = responseBody.has(\"DELIVERING\");",
									"tests[\"Body matches DELIVERED\"] = responseBody.has(\"DELIVERED\");",
									"tests[\"Body matches ABORTED\"] = responseBody.has(\"ABORTED\");",
									"",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 7 statuses\"] = jsonData.length === 10;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/deliverable/stage",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"deliverable",
								"stage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all possible draft types.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37177528-3da7-4f92-a437-80e79c7be3a4",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"",
									"//Check that all required statuses are present",
									"tests[\"Body matches USER\"] = responseBody.has(\"USER\");",
									"tests[\"Body matches SYSTEM\"] = responseBody.has(\"SYSTEM\");",
									"",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 7 statuses\"] = jsonData.length === 2;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/draftorder/type",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"draftorder",
								"type"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all possible cancellation reasons for delivery job.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3a015a0-0c1c-404c-9615-269a4bd234cd",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"",
									"//Check that all required statuses are present",
									"tests[\"Body matches LICENSING_ISSUE\"] = responseBody.has(\"LICENSING_ISSUE\");",
									"tests[\"Body matches ALTERNATE_DELIVERY\"] = responseBody.has(\"ALTERNATE_DELIVERY\");",
									"tests[\"Body matches INCORRECT_TITLE\"] = responseBody.has(\"INCORRECT_TITLE\");",
									"tests[\"Body matches INVALID_ORDER_DATA\"] = responseBody.has(\"INVALID_ORDER_DATA\");",
									"",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 7 statuses\"] = jsonData.length === 4;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/deliveryjob/cancellationReason",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"deliveryjob",
								"cancellationReason"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all possible statuses for order.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2d23089-ce90-4ea1-a9aa-4ac7fec098e0",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"//Check that all required statuses are present",
									"tests[\"Body matches RECEIVED\"] = responseBody.has(\"RECEIVED\");",
									"tests[\"Body matches IN_PROGRESS\"] = responseBody.has(\"IN_PROGRESS\");",
									"tests[\"Body matches COMPLETED\"] = responseBody.has(\"COMPLETED\");",
									"tests[\"Body matches REJECTED\"] = responseBody.has(\"REJECTED\");",
									"tests[\"Body matches FAILED\"] = responseBody.has(\"FAILED\");",
									"tests[\"Body matches CANCELED\"] = responseBody.has(\"CANCELED\");",
									"tests[\"Body matches AWAITING_SOURCES\"] = responseBody.has(\"AWAITING_SOURCES\");",
									"tests[\"Body matches AWAITING_INPUT\"] = responseBody.has(\"AWAITING_INPUT\");",
									"console.log(\"Response: \"+responseBody);",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 8 statuses\"] = jsonData.length === 8;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/order/status",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"order",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all information regarding job types.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "77b3da42-5881-4599-986d-4116d9decc8d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cb4364a-176d-4d86-b2e9-ee630e7f504f",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"//Check that all required statuses are present",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//check Localization",
									"var Localization = jsonData.Localization;",
									"tests[\"Localization has correct jobKey\"] = Localization.jobKey === \"localizationjobs\";",
									"//check Licensing",
									"var Licensing = jsonData.Licensing;",
									"tests[\"Licensing has correct jobKey\"] = Licensing.jobKey === \"licensingjobs\";",
									"//check Delivery ",
									"var Delivery = jsonData.Delivery;",
									"tests[\"Delivery has correct subTypeField\"] = Delivery.subTypeField === \"DeliveryJobType\";",
									"tests[\"Delivery has correct jobKey\"] = Delivery.jobKey === \"deliveryjobs\";",
									"var subTypes = Delivery.subTypes;",
									"//check Subtypes count",
									"tests[\"subTypes has 3 objects\"] = subTypes.length === 3;",
									"//check Subtypes AUTOMATIC",
									"tests[\"First subTypes is AUTOMATIC\"] = subTypes[0].value === \"AUTOMATIC\";",
									"tests[\"First subTypes has label 'Automated'\"] = subTypes[0].label === \"Automated\";",
									"//check Subtypes MANUAL_PASS_THROUGH",
									"tests[\"Second subTypes is MANUAL_PASS_THROUGH\"] = subTypes[1].value === \"MANUAL_PASS_THROUGH\";",
									"tests[\"Second subTypes has label 'Pass Through'\"] = subTypes[1].label === \"Pass Through\";",
									"//check Subtypes TRANSCODE_PASS_THROUGH",
									"tests[\"Third subTypes is TRANSCODE_PASS_THROUGH\"] = subTypes[2].value === \"TRANSCODE_PASS_THROUGH\";",
									"tests[\"Third subTypes has label 'Transcode Pass Through'\"] = subTypes[2].label === \"Transcode Pass Through\";",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/job/types",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"job",
								"types"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5f754571-3c7d-4018-9c70-bfca1af527d1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e0c29107-049c-4d6b-91ca-ca738e1daf0e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Performs consitency check on all orders.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "275e7d8d-c0b3-4768-9cfd-f83a93bf9f48",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/orders/checkAll",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"orders",
								"checkAll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creates new order using provided data.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8b116a59-b5fc-4cb4-9e81-cd4ff9722e64",
								"exec": [
									"function makeid() {\r",
									"  var text = \"\";\r",
									"  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
									"\r",
									"  for (var i = 0; i < 16; i++)\r",
									"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
									"\r",
									"  return text;\r",
									"}\r",
									"\r",
									"var DueDate = new Date();\r",
									"var DNDBDate = new Date();\r",
									"var ShippingDate = new Date();\r",
									"var AvaliabilityStart = new Date();\r",
									"var AvaliabilityEnd = new Date();\r",
									"var ExternalReference = makeid();\r",
									"\r",
									"DueDate.setMinutes(DueDate.getMinutes() + 50); // 5 min\r",
									"DNDBDate.setMinutes(DNDBDate.getMinutes() + 10); // 10 min\r",
									"ShippingDate.setDate(ShippingDate.getDate() + 1); // 1 day\r",
									"AvaliabilityStart.setHours(AvaliabilityStart.getHours() + 2); // 2 hours\r",
									"AvaliabilityEnd.setMonth(AvaliabilityEnd.getMonth() + 1); // 1 month\r",
									"\r",
									"\r",
									"pm.environment.set(\"DueDate\", DueDate.toISOString());\r",
									"pm.environment.set(\"DNDBDate\", DNDBDate.toISOString());\r",
									"pm.environment.set(\"ShippingDate\",ShippingDate.toISOString());\r",
									"pm.environment.set(\"AvailabilityStart\", AvaliabilityStart.toISOString());\r",
									"pm.environment.set(\"AvailabilityEnd\", AvaliabilityEnd.toISOString()); \r",
									"pm.environment.set(\"ExternalReference\", ExternalReference);\r",
									"var json ='{   \"description\": \"Jumanji QA\",   \"customer\": \"44d741fd\",   \"originalDue\": \"'+DueDate.toISOString()+'\",   \"originalDoNotDeliverBefore\": \"'+DNDBDate.toISOString()+'\",   \"externalReference\": \"'+ExternalReference+'\",   \"deliveryJobs\": [     {       \"customerPackageProfile\": \"ssa-nl168\",       \"customerWorkflow\": \"FirstTimePublish\",       \"targetCustomer\": \"44d741fd\",       \"targetCustomerId\": null,       \"targetTerritory\": \"IRL\",       \"targetLanguage\": \"eng\",       \"contentOwnerId\": \"e3b59a42\",       \"doNotDeliverBefore\": \"'+DNDBDate.toISOString()+'\",       \"availabilityStart\": \"'+AvaliabilityStart.toISOString()+'\",       \"availabilityEnd\": \"'+AvaliabilityEnd.toISOString()+'\",       \"allowProcessing\": true,       \"allowPackaging\": true,       \"allowDelivery\": true,       \"deliveryJobType\": \"AUTOMATIC\",       \"customer\": \"44d741fd\",       \"description\": \"123test\",       \"titleId\": \"AWUxwBLXF_AfgjR72RFb\",       \"titleVersion\": \"AWUzlEms6FbSZ_x5fb9A\",       \"due\": \"'+DueDate.toISOString()+'\",       \"details\": {         \"LGI_OrderOrigin\": \"Picklist\",         \"LicenseID\": \"11\",         \"Operator\": \"IE_Virgin\",         \"Contract\": \"Sony TVoD - UPC IE (2015-18)\",         \"OrderingResolutionRight\": \"HD\",         \"DeliveryResolution\": \"HD\",         \"YearOfProduction\": \"2017\",         \"CountriesOfProduction\": \"USA\",         \"ExternalLicenseID\": \"11\",         \"Studio\": \"Sony\",         \"SubtitleLanguage\": \"eng\",         \"AudioLanguage\": \"eng\",         \"UniqueProgramID\": \"52369_IRELAND_eng\",         \"AudioFormat\": \"OV with subtitles,HOH subtitles\",         \"ProducedLanguage\": \"eng\",         \"SimsTitleID\": \"\",         \"SimsClearanceID\": \"\",         \"SubScriptionType\": \"TVOD\",         \"ViewingPeriod\": \"48\",         \"AlternativeName\": \"\",         \"Genre\": \"movie/family\",         \"Relicense\": \"No\",         \"OrionFlag\": \"STB\",         \"RunTime\": \"02:00:00\",         \"ContractTitleCategory\": \"D&D\",         \"DownloadToGoDuration\": \"\",         \"ExpiryAfterPlayDuration\": \"\",         \"MaxActiveDownloads\": \"\",         \"StudioLicenseID\": \"BW78561289\",         \"EPGCategories\": \"IRELAND/DATA/TVOD/MOVIES\"       }     }   ] }';\r",
									"\r",
									"pm.environment.set(\"OrderCreaterequest\", json);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7a967332-c1c5-4f39-891a-fce6a0efa9c6",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"//Check each property",
									"if (responseCode.code === 201)",
									"{",
									" console.log(\"Response: \"+responseBody);   ",
									" var jsonData = JSON.parse(responseBody);",
									" pm.environment.set(\"NewOrderID\", jsonData.value);",
									" tests[\"Has error check\"] = jsonData.hasErrors === false;",
									" tests[\"validationMessages check\"] = jsonData.validationMessages.length === 0;   ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{OrderCreaterequest}}"
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/orders",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Performs search query on orders.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f0e4615-9c10-44a8-a53e-cf3821fe6340",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"var resultCount = parseInt(pm.environment.get(\"PageSize\"));",
									"//Check that all required statuses are present",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//check Jobs count",
									"var Results = jsonData.results;",
									"if (jsonData.totalCount >= resultCount)  tests[\"Check Page size\"] = Results.length === resultCount;  ",
									"",
									"//check that license job is license job =)",
									"for (var count = 0; count < Results.length; count++)",
									"{",
									"    console.log(count);",
									"    var Order = Results[count];",
									"    tests[\"Validate Order \"+count] = tv4.validateResult(Order ,pm.environment.get(\"OrderJobSchema\"));",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pageIndex\": 0,\n  \"pageSize\": {{PageSize}},\n  \"query\": \"\"\n}"
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/orders/find",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"orders",
								"find"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns information about specified order.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3943f94-52b4-4710-96da-65452475d8aa",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"//Check each property",
									"if (responseCode.code === 200)",
									"{",
									"var Order = JSON.parse(responseBody);",
									"var orderId = pm.environment.get(\"NewOrderID\");",
									"var temp = pm.environment.get(\"OrderCreaterequest\");",
									"var CreationRequest = JSON.parse(temp);",
									"",
									"tests[\"Order Id check\"] = Order.id === orderId;",
									"tests[\"Order description check\"] = Order.description === CreationRequest.description;",
									"tests[\"Order customer check\"] = Order.customer === CreationRequest.customer;",
									"tests[\"Order billable customer check\"] = Order.billableCustomerId === CreationRequest.customer;",
									"tests[\"Order originalDue check\"] = Date(Order.originalDue) ==   Date(CreationRequest.originalDue);",
									"tests[\"Order originalDoNotDeliverBefore check\"] =  Date(Order.originalDoNotDeliverBefore) ==  Date(CreationRequest.originalDoNotDeliverBefore);",
									"tests[\"Order externalReference check\"] = Order.externalReference === CreationRequest.externalReference;",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e9464496-1d70-4ea8-9ead-c87816570392",
								"exec": [
									"console.log(\"Waiting Started\");",
									"setTimeout(function() {}, 5000);//wait 5 sec",
									"console.log(\"Waiting Finished\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/orders/:id",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{NewOrderID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Updates existing order with provided data.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b41ec098-79ee-4872-8f87-6178c901f85e",
								"exec": [
									"function makeid() {",
									"  var text = \"\";",
									"  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
									"",
									"  for (var i = 0; i < 16; i++)",
									"    text += possible.charAt(Math.floor(Math.random() * possible.length));",
									"",
									"  return text;",
									"}",
									"",
									"var NewExternalReference = makeid();",
									"pm.environment.set(\"ExternalReference\", NewExternalReference);",
									"",
									"",
									"var OrderId = pm.environment.get(\"NewOrderID\");",
									"",
									"GetActualOrderInfo = {",
									"  url: (pm.environment.get(\"OrderAPIHost\")+'/v1/orders/'+OrderId),",
									"  method: 'GET'",
									"};",
									"pm.sendRequest(GetActualOrderInfo, function (err, res) {",
									"var temp = pm.environment.get(\"OrderCreaterequest\");",
									"var CreationRequest = JSON.parse(temp);",
									"var OrderVersion;",
									"if (res.json().version !== null)",
									"{",
									"OrderVersion =  res.json().version;",
									"pm.environment.set(\"OrderVersion\",OrderVersion);",
									"}",
									"else",
									"{",
									"   pm.environment.set(\"OrderVersion\", 0); ",
									"}",
									"var OrderUpdateBody = '{   \"id\": \"'+OrderId+'\",   \"version\": '+OrderVersion+',   \"description\": \"'+CreationRequest.description+' Updated\",   \"billableCustomerId\": null,   \"externalReference\": \"'+NewExternalReference+'\" }';",
									"pm.environment.set(\"OrderUpdateBody\", OrderUpdateBody);",
									"});",
									"console.log(\"Waiting Started\");",
									"setTimeout(function() {}, 5000);//wait 5 sec",
									"console.log(\"Waiting Finished\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6ccc75ee-c178-4836-81c8-888e5b654088",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"//Check each property",
									"var id = pm.environment.get(\"NewOrderID\");",
									"console.log(id);",
									"if (responseCode.code === 200)",
									"{",
									"    var ActualOrderInfo;",
									"    var json = JSON.parse(responseBody);",
									"    tests[\"Response value check \"] = json.value === true;",
									"    tests[\"Response validationMessages check \"] = json.validationMessages.length === 0;",
									"    tests[\"Response hasErrors check \"] = json.hasErrors === false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{OrderUpdateBody}}"
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/orders",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns full information about order. Includes all associated jobs.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "754b8bd6-bd22-4082-9ce7-c97448f86182",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"//Check each property",
									"if (responseCode.code === 200)",
									"{",
									"var json = JSON.parse(responseBody);",
									"var Order = json.order;",
									"var DeliveryJob = json.deliveryJobs[0];",
									"var orderId = pm.environment.get(\"NewOrderID\");",
									"var temp = pm.environment.get(\"OrderCreaterequest\");",
									"var CreationRequest = JSON.parse(temp);",
									"",
									"tests[\"Order Id check\"] = Order.id === orderId;",
									"tests[\"Order description check\"] = Order.description === (CreationRequest.description+\" Updated\");",
									"tests[\"Order customer check\"] = Order.customer === CreationRequest.customer;",
									"tests[\"Order billable customer check\"] = Order.billableCustomerId === CreationRequest.customer;",
									"tests[\"Order originalDue check\"] = Date(Order.originalDue) ==   Date(CreationRequest.originalDue);",
									"tests[\"Order originalDoNotDeliverBefore check\"] =  Date(Order.originalDoNotDeliverBefore) ==  Date(CreationRequest.originalDoNotDeliverBefore);",
									"tests[\"Order externalReference check\"] = Order.externalReference ===  pm.environment.get(\"ExternalReference\");",
									"console.log(Order.externalReference+\" || \"+  CreationRequest.externalReference);",
									"tests[\"DeliveryJob customerPackageProfile check\"] = DeliveryJob.customerPackageProfile === CreationRequest.deliveryJobs[0].customerPackageProfile;",
									"tests[\"DeliveryJob customerWorkflow check\"] = DeliveryJob.customerWorkflow === CreationRequest.deliveryJobs[0].customerWorkflow;",
									"//tests[\"DeliveryJob targetCustomer check\"] = DeliveryJob.targetCustomer === CreationRequest.deliveryJobs[0].targetCustomer;",
									"//console.log(CreationRequest.deliveryJobs[0].targetCustomer+\" || \"+ DeliveryJob.targetCustomer );",
									"tests[\"DeliveryJob targetCustomerId check\"] = DeliveryJob.targetCustomerId === CreationRequest.deliveryJobs[0].targetCustomerId;",
									"tests[\"DeliveryJob targetTerritory check\"] = DeliveryJob.targetTerritory === CreationRequest.deliveryJobs[0].targetTerritory;",
									"tests[\"DeliveryJob targetLanguage check\"] = DeliveryJob.targetLanguage === CreationRequest.deliveryJobs[0].targetLanguage;",
									"tests[\"DeliveryJob contentOwnerId check\"] = DeliveryJob.contentOwnerId === CreationRequest.deliveryJobs[0].contentOwnerId;",
									"tests[\"DeliveryJob doNotDeliverBefore check\"] = Date(DeliveryJob.doNotDeliverBefore) === Date(CreationRequest.deliveryJobs[0].doNotDeliverBefore);",
									"tests[\"DeliveryJob availabilityStart check\"] = Date(DeliveryJob.availabilityStart) === Date(CreationRequest.deliveryJobs[0].availabilityStart);",
									"tests[\"DeliveryJob availabilityEnd check\"] = Date(DeliveryJob.availabilityEnd) === Date(CreationRequest.deliveryJobs[0].availabilityEnd);",
									"tests[\"DeliveryJob allowProcessing check\"] = DeliveryJob.allowProcessing === CreationRequest.deliveryJobs[0].allowProcessing;",
									"tests[\"DeliveryJob allowPackaging check\"] = DeliveryJob.allowPackaging === CreationRequest.deliveryJobs[0].allowPackaging;",
									"tests[\"DeliveryJob allowDelivery check\"] = DeliveryJob.allowDelivery === CreationRequest.deliveryJobs[0].allowDelivery;",
									"tests[\"DeliveryJob deliveryJobType check\"] = DeliveryJob.deliveryJobType === CreationRequest.deliveryJobs[0].deliveryJobType;",
									"tests[\"DeliveryJob customer check\"] = DeliveryJob.customer === CreationRequest.deliveryJobs[0].customer;",
									"//tests[\"DeliveryJob description check\"] = DeliveryJob.description === CreationRequest.deliveryJobs[0].description;",
									"//console.log(DeliveryJob.description+\" || \"+  CreationRequest.deliveryJobs[0].description);",
									"tests[\"DeliveryJob titleId check\"] = DeliveryJob.titleId === CreationRequest.deliveryJobs[0].titleId;",
									"tests[\"DeliveryJob titleVersion check\"] = DeliveryJob.titleVersion === CreationRequest.deliveryJobs[0].titleVersion;",
									"tests[\"DeliveryJob due check\"] = Date(DeliveryJob.due) === Date(CreationRequest.deliveryJobs[0].due);",
									"    ",
									"    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/orders/{{NewOrderID}}/full",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"orders",
								"{{NewOrderID}}",
								"full"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns entity change for specified order and entity version.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8a38bd0-77f6-421e-b0e5-5773ec352aee",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"if (responseCode.code === 200)",
									"{",
									"var baseVersion = parseInt(pm.environment.get(\"OrderVersion\"));",
									"var OrderId = pm.environment.get(\"NewOrderID\");",
									"var entity = JSON.parse(responseBody);",
									"",
									"",
									"tests[\"BaseVersion is correct\"] = entity.baseVersion === baseVersion;",
									"tests[\"Id is correct\"] = entity.id == (OrderId + '.'+ baseVersion);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/orders/:id/history/:version",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"orders",
								":id",
								"history",
								":version"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{NewOrderID}}"
								},
								{
									"key": "version",
									"value": "{{OrderVersion}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a range of changes applied to specified order.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "909872a9-636e-461f-9d73-d492608a58fc",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"if (responseCode.code === 200)",
									"{",
									"var baseVersion = parseInt(pm.environment.get(\"OrderVersion\"));",
									"var OrderID = pm.environment.get(\"NewOrderID\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"for (var count = 0; count < jsonData.totalCount; count++)",
									"{",
									"    var entity = jsonData.results[count].entity;",
									"    tests[\"Validate record id for record \"+ count] = jsonData.results[count].id == (OrderID + '.'+ count);",
									"    tests[\"Validate baseVersion for record \"+ count] = jsonData.results[count].baseVersion  == count;",
									"}",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/orders/:id/history?take=500",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"orders",
								":id",
								"history"
							],
							"query": [
								{
									"key": "skip",
									"value": "{{skip}}",
									"disabled": true
								},
								{
									"key": "take",
									"value": "500"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{NewOrderID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns orders with given external reference (PO Number)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1532e03a-c060-4192-8fcd-6ea9d35d6e03",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"//Check each property",
									"if (responseCode.code === 200)",
									"{",
									"var json = JSON.parse(responseBody);",
									"var Order = json[0];",
									"var orderId = pm.environment.get(\"NewOrderID\");",
									"var temp = pm.environment.get(\"OrderCreaterequest\");",
									"var CreationRequest = JSON.parse(temp);",
									"",
									"tests[\"Order Id check\"] = Order.id === orderId;",
									"tests[\"Order description check\"] = Order.description === (CreationRequest.description+\" Updated\");",
									"tests[\"Order customer check\"] = Order.customer === CreationRequest.customer;",
									"tests[\"Order billable customer check\"] = Order.billableCustomerId === CreationRequest.customer;",
									"tests[\"Order originalDue check\"] = Date(Order.originalDue) ==   Date(CreationRequest.originalDue);",
									"tests[\"Order originalDoNotDeliverBefore check\"] =  Date(Order.originalDoNotDeliverBefore) ==  Date(CreationRequest.originalDoNotDeliverBefore);",
									"tests[\"Order externalReference check\"] = Order.externalReference ===  pm.environment.get(\"ExternalReference\");",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/orders/byexternalreference/:externalReference",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"orders",
								"byexternalreference",
								":externalReference"
							],
							"variable": [
								{
									"key": "externalReference",
									"value": "{{ExternalReference}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Clones target order and all asociated jobs.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d0bf83-22ab-4a3c-ad1b-900c226f676b",
								"exec": [
									"var NewDueDate = new Date();",
									"NewDueDate.setHours(NewDueDate.getHours() + 2);",
									"pm.environment.set(\"OrderCloneDueDate\", NewDueDate.toISOString());",
									"var OrderId = pm.environment.get(\"NewOrderID\");",
									"",
									"console.log(NewDueDate.toISOString());",
									"var OrderCloneRequest = '{   \"originalOrderId\": \"'+OrderId+'\",   \"newDueDate\": \"'+NewDueDate.toISOString()+'\",   \"allowProcessing\": true,   \"allowPackaging\": true,   \"allowDelivery\": true,   \"copyCustomerProfile\": true  }';",
									"",
									"pm.environment.set(\"OrderCloneRequest\", OrderCloneRequest);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "555448b8-3125-4e8b-a7de-b694c5d4c19a",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"console.log(\"Response: \"+responseBody);",
									"//Check each property",
									"console.log(\"Waiting Started\");",
									"setTimeout(function() {}, 5000);//wait 5 sec",
									"console.log(\"Waiting Finished\");",
									"if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.environment.set(\"ClonedOrderID\", jsonData.value);",
									"    tests[\"Has error check\"] = jsonData.hasErrors === false;",
									"    tests[\"validationMessages check\"] = jsonData.validationMessages.length === 0;   ",
									"    ",
									"    GetClonedOrderInfo = {",
									"  url: (pm.environment.get(\"OrderAPIHost\")+'/v1/orders/'+jsonData.value+'/full'),",
									"  method: 'GET'",
									"};",
									"    pm.sendRequest(GetClonedOrderInfo, function (err, res) {",
									"pm.environment.set(\"ClonedOrderInfo\", res.json());",
									"});",
									"    ",
									"    var ClonedOrderInfo = pm.environment.get(\"ClonedOrderInfo\");",
									"    var OrderCloneDueDate = pm.environment.get(\"OrderCloneDueDate\");",
									"    ",
									"    tests[\"New due date check\"] = Date(ClonedOrderInfo.order.originalDue) === Date(OrderCloneDueDate);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{OrderCloneRequest}}"
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/orders/clone",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"orders",
								"clone"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aborts specified order.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d66b0507-cfa5-4746-a05d-bbff02feb701",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/orders/:id?cancellationReason=INVALID_ORDER_DATA",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"orders",
								":id"
							],
							"query": [
								{
									"key": "cancellationReason",
									"value": "INVALID_ORDER_DATA"
								},
								{
									"key": "cancellationDetails",
									"value": "{{cancellationDetails}}",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{NewOrderID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "LicensingJobs",
			"item": [
				{
					"name": "Creates new licensing job using provided data. Skip no tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aadc5ad7-8c09-42cf-aa6d-9748a19088eb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/licensingjobs",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"licensingjobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Performs search query for licensing jobs.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79bc6039-a1fe-4646-b6b8-993854d1e02d",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var resultCount = parseInt(pm.environment.get(\"PageSize\"));",
									"//Check that all required statuses are present",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//check Jobs count",
									"var Results = jsonData.results;",
									"if (jsonData.totalCount >= resultCount)  tests[\"Check Page size\"] = Results.length === resultCount;  ",
									"",
									"//check that license job is license job =)",
									"for (var count = 0; count < Results.length; count++)",
									"{",
									"    var LicenseJob = Results[count];",
									"    tests[\"Validate license \"+count] = LicenseJob.urn.includes(\"licensingjob\");",
									"}",
									"",
									"pm.environment.set(\"License\", Results[0]);",
									"pm.environment.set(\"LicenseVersion\", Results[0].version-1);",
									"pm.environment.set(\"LicenseId\", Results[0].id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pageIndex\": 0,\r\n  \"pageSize\": {{PageSize}},\r\n  \"query\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/licensingjobs/find",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"licensingjobs",
								"find"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns full information about specified licensing job.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4c2d83e4-9e2b-4408-8a00-df0105997bf7",
								"exec": [
									"FindRandomLicense = {\r",
									"  url: (pm.environment.get(\"OrderAPIHost\")+'/v1/licensingjobs/find'),\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify({\r",
									"  \"pageIndex\": 0,\r",
									"  \"pageSize\":1,\r",
									"  \"query\": \"\"\r",
									"})\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(FindRandomLicense, function (err, res) {\r",
									"    console.log(res.json());\r",
									"if (res.json().results.length > 0)\r",
									"{\r",
									"pm.environment.set(\"License\", res.json().results[0]);\r",
									"pm.environment.set(\"LicenseId\", res.json().results[0].id);\r",
									"}\r",
									"else\r",
									"{\r",
									"   pm.environment.set(\"LicenseId\", \"00000000-0000-0000-0000-000000000000\"); \r",
									"    \r",
									"}\r",
									"});\r",
									"\r",
									" "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8a989a54-e9e6-4589-97d5-22f82196502a",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"//Check each property",
									"if (responseCode.code === 200)",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"var FindLicense = pm.environment.get(\"License\");",
									"var properties = Object.getOwnPropertyNames(FindLicense);",
									"for (var count = 0; count < properties.length; count++)",
									"{",
									"    var property = properties[count];",
									"    tests[\"Validate property: \"+ property] = FindLicense.property == jsonData.property;",
									"}",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/licensingjobs/{{LicenseId}}",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"licensingjobs",
								"{{LicenseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns entity change for specified licensing job and entity version.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ab9250cb-6d69-424a-b468-d025bfd64a07",
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "de0f5592-230d-4f0d-9d59-0aa4b366c69e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"if (responseCode.code === 200)",
									"{",
									"var baseVersion = parseInt(pm.environment.get(\"LicenseVersion\"));",
									"var LicenseId = pm.environment.get(\"LicenseId\");",
									"var jsonData = JSON.parse(responseBody);",
									"var entity = jsonData.entity;",
									"",
									"",
									"tests[\"BaseVersion is correct\"] = jsonData.baseVersion === baseVersion;",
									"tests[\"Id is correct\"] = jsonData.id == (LicenseId + '.'+ baseVersion);",
									"tests[\"Entity Id is correct\"] = entity.Id == LicenseId;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/licensingjobs/{{LicenseId}}/history/{{LicenseVersion}}",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"licensingjobs",
								"{{LicenseId}}",
								"history",
								"{{LicenseVersion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of licensing jobs for order.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "56f26e51-057d-463d-b7c1-befabba88d8f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a94ccfb0-81fe-4439-b37e-ab97b5437714",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/licensingjobs/fororder/{{LicenseOrderId}}",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"licensingjobs",
								"fororder",
								"{{LicenseOrderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a range of changes applied to specified licensing job.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d1f90f48-c662-43bc-974f-3c58abed3d2a",
								"exec": [
									"FindRandomLicense = {\r",
									"  url: (pm.environment.get(\"OrderAPIHost\")+'/v1/licensingjobs/find'),\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify({\r",
									"  \"pageIndex\": 0,\r",
									"  \"pageSize\":1,\r",
									"  \"query\": \"\"\r",
									"})\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(FindRandomLicense, function (err, res) {\r",
									"if (res.json().results.lenght > 0)\r",
									"{\r",
									"pm.environment.set(\"License\", res.json().results[0]);\r",
									"pm.environment.set(\"LicenseVersion\", res.json().results[0].version-1);\r",
									"pm.environment.set(\"LicenseId\", res.json().results[0].id);\r",
									"pm.environment.set(\"LicenseOrderId\", res.json().results[0].orderId);\r",
									"}\r",
									"else\r",
									"{\r",
									"   pm.environment.set(\"LicenseId\", \"00000000-0000-0000-0000-000000000000\"); \r",
									"    \r",
									"}\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5596740e-5513-4e19-ad51-74d16d9bc094",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"if (responseCode.code === 200)",
									"{",
									"var baseVersion = parseInt(pm.environment.get(\"LicenseVersion\"));",
									"var LicenseId = pm.environment.get(\"LicenseId\");",
									"var LicenseOrderId = pm.environment.get(\"LicenseOrderId\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"for (var count = 0; count < jsonData.totalCount; count++)",
									"{",
									"    var entity = jsonData.results[count].entity;",
									"    tests[\"Validate record id for record \"+ count] = jsonData.results[count].id == (LicenseId + '.'+ count);",
									"    tests[\"Validate entity id for record \"+ count] = entity.Id == LicenseId;",
									"    tests[\"Validate entity order id for record \"+ count] = entity.OrderId == LicenseOrderId;",
									"}",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/licensingjobs/{{LicenseId}}/history?take=500",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"licensingjobs",
								"{{LicenseId}}",
								"history"
							],
							"query": [
								{
									"key": "skip",
									"value": "{{skip}}",
									"disabled": true
								},
								{
									"key": "take",
									"value": "500"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DeliveryJobs",
			"item": [
				{
					"name": "Performs consistency check on all delivery jobs.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3627e6b0-b33a-49cd-9a39-fa287e305dcd",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/deliveryjobs/checkAll?fullScan=false",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"deliveryjobs",
								"checkAll"
							],
							"query": [
								{
									"key": "fullScan",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a list of supposedly stuck jobs.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b24a7412-4d2c-44e5-afd2-d5644e913adc",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody).results;",
									"    jsonData.forEach(function(entity){",
									"        GetStuckDeliveryJob = {",
									"            url: (pm.environment.get(\"OrderAPIHost\")+'/v1/deliveryjobs/'+entity.jobId),",
									"            method: 'GET'",
									"        };",
									"        pm.sendRequest(GetStuckDeliveryJob, function (err, res) ",
									"        {",
									"            pm.test(\"Validate job by jobId \"+ entity.jobId, function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect( res.json().id).to.eql(entity.jobId);",
									"               });",
									"        });",
									"       ",
									"   });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/deliveryjobs/stuck?maxIdleMinutes=60",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"deliveryjobs",
								"stuck"
							],
							"query": [
								{
									"key": "maxIdleMinutes",
									"value": "60"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all jobs currently blocked by do-not-deliver-before dates.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52c5eda7-9a21-459c-87e5-18408e188f97",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/deliveryjobs/blockedDndb",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"deliveryjobs",
								"blockedDndb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of delivery jobs for order.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "068575d4-3989-4344-a153-2e14d56208ee",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"//Check each property",
									"if (responseCode.code === 200)",
									"{",
									"var json = JSON.parse(responseBody);",
									"var deliveryjob = json[0];",
									"var orderId = pm.environment.get(\"ClonedOrderID\");",
									"//tests[\"Order Id check\"] = Order.id === orderId;",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/deliveryjobs/fororder/{{ClonedOrderID}}",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"deliveryjobs",
								"fororder",
								"{{ClonedOrderID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tasks Copy",
			"item": [
				{
					"name": "ONEORDRS-501",
					"item": [
						{
							"name": "Compliance Part",
							"item": [
								{
									"name": "ONEORDRS-501 Create Order with Compliance Job",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "abfe0634-cee3-4b05-8651-35e77f3c1192",
												"exec": [
													"//create a complieance job",
													"function makeid() {",
													"  var text = \"\";",
													"  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
													"",
													"  for (var i = 0; i < 16; i++)",
													"    text += possible.charAt(Math.floor(Math.random() * possible.length));",
													"",
													"  return text;",
													"}",
													"",
													"var DueDate = new Date();",
													"var DNDBDate = new Date();",
													"var ShippingDate = new Date();",
													"var AvaliabilityStart = new Date();",
													"var AvaliabilityEnd = new Date();",
													"var ExternalReference = makeid();",
													"",
													"DueDate.setMinutes(DueDate.getMinutes() + 50); // 5 min",
													"DNDBDate.setMinutes(DNDBDate.getMinutes() + 10); // 10 min",
													"ShippingDate.setDate(ShippingDate.getDate() + 1); // 1 day",
													"AvaliabilityStart.setHours(AvaliabilityStart.getHours() + 2); // 2 hours",
													"AvaliabilityEnd.setMonth(AvaliabilityEnd.getMonth() + 1); // 1 month",
													"",
													"var TitleId = pm.environment.get(\"501_TitleId\");",
													"console.log(TitleId);",
													"var TitleVersion = pm.environment.get(\"501_TitleVersion\");",
													"console.log(TitleVersion);",
													"var CustomerPackageProfile = pm.environment.get(\"501_CustomerPackageProfile\");",
													"console.log(CustomerPackageProfile);",
													"",
													"var json = '{\"description\":\"Postman 501 Retest\",\"customer\":\"e3b59a42\",\"originalDue\":\"'+DueDate.toISOString()+'\",\"originalDoNotDeliverBefore\":\"'+DNDBDate.toISOString()+'\",\"externalReference\":\"'+ExternalReference+'\",\"complianceJobs\":[{\"title\":\"Sample Title\",\"customer\":\"e3b59a42\",\"titleId\":\"'+TitleId+'\",\"titleVersion\":\"'+TitleVersion+'\",\"customerPackageProfile\":\"'+CustomerPackageProfile+'\",\"due\":\"'+DueDate.toISOString()+'\"}]}';",
													"console.log(json);",
													"pm.environment.set(\"501_OrderCreateRequest\", json);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7adf5d02-e300-409b-a7aa-7df9d45b7d1b",
												"exec": [
													"tests[\"Status code is 201\"] = responseCode.code === 201;",
													"//Check each property",
													"function pausecomp(millis)",
													" {",
													"  var date = new Date();",
													"  var curDate = null;",
													"  do { curDate = new Date(); }",
													"  while(curDate-date < millis);",
													"}",
													"",
													"",
													"if (responseCode.code === 201)",
													"{",
													" var jsonData = JSON.parse(responseBody);",
													" pm.environment.set(\"501_NewOrderID\", jsonData.value);",
													" tests[\"Has error check\"] = jsonData.hasErrors === false;",
													" tests[\"validationMessages check\"] = jsonData.validationMessages.length === 0; ",
													" pausecomp(5000);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{501_OrderCreateRequest}}"
										},
										"url": {
											"raw": "{{OrderAPIHost}}/v1/orders",
											"host": [
												"{{OrderAPIHost}}"
											],
											"path": [
												"v1",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "ONEORDRS-501 Check Compliance Job byOrderID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "460a1f73-d823-4d5a-8ac4-c24edf5a7697",
												"exec": [
													"//Check Status Code",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"//Check each property",
													"if (responseCode.code === 200)",
													"{",
													"var ComplianceJob = JSON.parse(responseBody)[0];",
													"//console.log(ComplianceJob);",
													"pm.environment.set(\"501_ComplianceJobID\", ComplianceJob.id);",
													"tests[\"Customer Package Profile check\"] = ComplianceJob.customerPackageProfile !== null;",
													"tests[\"title Name check\"] = ComplianceJob.titleName !== null;",
													"console.log(\"CJob - titleName:\"+ComplianceJob.titleName);",
													"tests[\"title VersionName check\"] = ComplianceJob.titleVersionName !== null;",
													"console.log(\"CJob - titleVersionName:\"+ComplianceJob.titleVersionName);",
													"tests[\"due check\"] = ComplianceJob.due !== null; ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{OrderAPIHost}}/v1/compliancejobs/fororder/{{501_NewOrderID}}",
											"host": [
												"{{OrderAPIHost}}"
											],
											"path": [
												"v1",
												"compliancejobs",
												"fororder",
												"{{501_NewOrderID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ONEORDRS-501 Check Compliance Job by JobID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "669ddabc-babb-4221-b247-a0031cc09ce9",
												"exec": [
													"//Check Status Code",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"//Check each property",
													"if (responseCode.code === 200)",
													"{",
													"var ComplianceJob = JSON.parse(responseBody);",
													"tests[\"Customer Package Profile check\"] = ComplianceJob.customerPackageProfile !== null;",
													"tests[\"title Name check\"] = ComplianceJob.titleName !== null;",
													"console.log(\"CJob - titleName:\"+ComplianceJob.titleName);",
													"tests[\"title VersionName check\"] = ComplianceJob.titleVersionName !== null;",
													"console.log(\"CJob - titleVersionName:\"+ComplianceJob.titleVersionName);",
													"tests[\"due check\"] = ComplianceJob.due !== null; ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{OrderAPIHost}}/v1/compliancejobs/{{501_ComplianceJobID}}",
											"host": [
												"{{OrderAPIHost}}"
											],
											"path": [
												"v1",
												"compliancejobs",
												"{{501_ComplianceJobID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "QC Part",
							"item": [
								{
									"name": "ONEORDRS-501 Create Order with QC Job",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "abfe0634-cee3-4b05-8651-35e77f3c1192",
												"exec": [
													"//create a complieance job",
													"function makeid() {",
													"  var text = \"\";",
													"  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
													"",
													"  for (var i = 0; i < 16; i++)",
													"    text += possible.charAt(Math.floor(Math.random() * possible.length));",
													"",
													"  return text;",
													"}",
													"",
													"var DueDate = new Date();",
													"var DNDBDate = new Date();",
													"var ShippingDate = new Date();",
													"var AvaliabilityStart = new Date();",
													"var AvaliabilityEnd = new Date();",
													"var ExternalReference = makeid();",
													"",
													"DueDate.setMinutes(DueDate.getMinutes() + 50); // 5 min",
													"DNDBDate.setMinutes(DNDBDate.getMinutes() + 10); // 10 min",
													"ShippingDate.setDate(ShippingDate.getDate() + 1); // 1 day",
													"AvaliabilityStart.setHours(AvaliabilityStart.getHours() + 2); // 2 hours",
													"AvaliabilityEnd.setMonth(AvaliabilityEnd.getMonth() + 1); // 1 month",
													"",
													"var TitleId = pm.environment.get(\"501_TitleId_QC\");",
													"console.log(TitleId);",
													"var TitleVersion = pm.environment.get(\"501_TitleVersion_QC\");",
													"console.log(TitleVersion);",
													"var CustomerPackageProfile = pm.environment.get(\"501_CustomerPackageProfile_QC\");",
													"console.log(CustomerPackageProfile);",
													"var SourceAssetId = pm.environment.get(\"501_SourceAssetId_QC\");",
													"",
													"var json = '{\"description\":\"Postman 501 Retest QC\",\"customer\":\"e3b59a42\",\"originalDue\":\"'+DueDate.toISOString()+'\",\"originalDoNotDeliverBefore\":\"'+DNDBDate.toISOString()+'\",\"externalReference\":\"'+ExternalReference+'\",\"qcJobs\":[{\"customer\":\"e3b59a42\",\"titleId\":\"'+TitleId+'\",\"titleVersion\":\"'+TitleVersion+'\",\"sourceAssetId\":\"'+SourceAssetId+'\",\"customerPackageProfile\":\"'+ CustomerPackageProfile+'\",\"due\":\"'+DueDate.toISOString()+'\"}]}';",
													"console.log(json);",
													"pm.environment.set(\"501_OrderCreateRequest\", json);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7adf5d02-e300-409b-a7aa-7df9d45b7d1b",
												"exec": [
													"tests[\"Status code is 201\"] = responseCode.code === 201;",
													"//Check each property",
													"function pausecomp(millis)",
													" {",
													"  var date = new Date();",
													"  var curDate = null;",
													"  do { curDate = new Date(); }",
													"  while(curDate-date < millis);",
													"}",
													"",
													"",
													"if (responseCode.code === 201)",
													"{",
													" var jsonData = JSON.parse(responseBody);",
													" pm.environment.set(\"501_NewOrderID_QC\", jsonData.value);",
													" tests[\"Has error check\"] = jsonData.hasErrors === false;",
													" tests[\"validationMessages check\"] = jsonData.validationMessages.length === 0; ",
													" pausecomp(5000);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{501_OrderCreateRequest}}"
										},
										"url": {
											"raw": "{{OrderAPIHost}}/v1/orders",
											"host": [
												"{{OrderAPIHost}}"
											],
											"path": [
												"v1",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "ONEORDRS-501 Check qc Job byOrderID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "460a1f73-d823-4d5a-8ac4-c24edf5a7697",
												"exec": [
													"//Check Status Code",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"pm.environment.set(\"501_QCJobID\", \"\");",
													"tests[\"Order has been found\"] = responseBody !== \"[]\";",
													"//Check each property",
													"if (responseCode.code === 200 && responseBody !== \"[]\")",
													"{",
													"var QCJob = JSON.parse(responseBody)[0];",
													"console.log(responseBody);",
													"pm.environment.set(\"501_QCJobID\", QCJob.id);",
													"tests[\"Customer Package Profile check\"] = QCJob.customerPackageProfile !== null;",
													"tests[\"title Name check\"] = QCJob.titleName !== null;",
													"console.log(\"QC Job - titleName:\"+QCJob.titleName);",
													"tests[\"title VersionName check\"] = QCJob.titleVersionName !== null;",
													"console.log(\"QC Job - titleVersionName:\"+QCJob.titleVersionName);",
													"tests[\"due check\"] = QCJob.due !== null; ",
													"}",
													"else",
													"{",
													"    console.log(\"Stop Tests\");",
													"    postman.setNextRequest(null);",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{OrderAPIHost}}/v1/qcjobs/fororder/{{501_NewOrderID_QC}}",
											"host": [
												"{{OrderAPIHost}}"
											],
											"path": [
												"v1",
												"qcjobs",
												"fororder",
												"{{501_NewOrderID_QC}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ONEORDRS-501 Check qc Job by JobID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "669ddabc-babb-4221-b247-a0031cc09ce9",
												"exec": [
													"//Check Status Code",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"tests[\"Order has been found\"] = pm.environment.get(\"501_QCJobID\") !== null;",
													"//Check each property",
													"if (responseCode.code === 200 && pm.environment.get(\"501_QCJobID\") !== null)",
													"{",
													"var QCJob = JSON.parse(responseBody);",
													"",
													"",
													"tests[\"Customer Package Profile check\"] = QCJob.customerPackageProfile !== null;",
													"tests[\"title Name check\"] = QCJob.titleName !== null;",
													"console.log(\"QC Job - titleName:\"+QCJob.titleName);",
													"tests[\"title VersionName check\"] = QCJob.titleVersionName !== null;",
													"console.log(\"QC Job - titleVersionName:\"+QCJob.titleVersionName);",
													"tests[\"due check\"] = QCJob.due !== null; ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{OrderAPIHost}}/v1/qcjobs/{{501_QCJobID}}",
											"host": [
												"{{OrderAPIHost}}"
											],
											"path": [
												"v1",
												"qcjobs",
												"{{501_QCJobID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"description": "https://jira.d3nw.com/browse/ONEORDRS-501",
					"_postman_isSubFolder": true
				}
			]
		}
	]
}