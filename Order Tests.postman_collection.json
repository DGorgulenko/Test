{
	"info": {
		"_postman_id": "8c1fd61a-d8d9-48cf-aa70-073ff5607c13",
		"name": "Order Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Const",
			"item": [
				{
					"name": "Returns all possible statuses for delivery job.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e47ea4e7-e69b-46e8-b305-5848a6272345",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"",
									"//Check that all required statuses are present",
									"tests[\"Body matches UNDER_REVIEW\"] = responseBody.has(\"UNDER_REVIEW\");",
									"tests[\"Body matches AWAITING_INPUT\"] = responseBody.has(\"AWAITING_INPUT\");",
									"tests[\"Body matches AWAITING_SOURCES\"] = responseBody.has(\"AWAITING_SOURCES\");",
									"tests[\"Body matches RECEIVED\"] = responseBody.has(\"RECEIVED\");",
									"tests[\"Body matches REJECTED\"] = responseBody.has(\"REJECTED\");",
									"tests[\"Body matches IN_PROGRESS\"] = responseBody.has(\"IN_PROGRESS\");",
									"tests[\"Body matches COMPLETED\"] = responseBody.has(\"COMPLETED\");",
									"tests[\"Body matches CANCELED\"] = responseBody.has(\"CANCELED\");",
									"tests[\"Body matches FAILED\"] = responseBody.has(\"FAILED\");",
									"tests[\"Body matches RETRYING\"] = responseBody.has(\"RETRYING\");",
									"",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 7 statuses\"] = jsonData.length === 10;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/deliveryjob/status",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"deliveryjob",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all possible stages for delivery job.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "218ed869-ba7c-488c-9c61-383df3ab12a5",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"",
									"//Check that all required statuses are present",
									"tests[\"Body matches PENDING\"] = responseBody.has(\"PENDING\");",
									"tests[\"Body matches DISCOVERY\"] = responseBody.has(\"DISCOVERY\");",
									"tests[\"Body matches RESOLVING_MATERIALS\"] = responseBody.has(\"RESOLVING_MATERIALS\");",
									"tests[\"Body matches AWAITING_SOURCES\"] = responseBody.has(\"AWAITING_SOURCES\");",
									"tests[\"Body matches READY_FOR_PROCESSING\"] = responseBody.has(\"READY_FOR_PROCESSING\");",
									"tests[\"Body matches PROCESSING\"] = responseBody.has(\"PROCESSING\");",
									"tests[\"Body matches READY_FOR_PACKAGING\"] = responseBody.has(\"READY_FOR_PACKAGING\");",
									"tests[\"Body matches PACKAGING\"] = responseBody.has(\"PACKAGING\");",
									"tests[\"Body matches READY_FOR_DELIVERY\"] = responseBody.has(\"READY_FOR_DELIVERY\");",
									"tests[\"Body matches DELIVERING\"] = responseBody.has(\"DELIVERING\");",
									"tests[\"Body matches DELIVERED\"] = responseBody.has(\"DELIVERED\");",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 7 statuses\"] = jsonData.length === 11;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/deliveryjob/stage",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"deliveryjob",
								"stage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all possible cancellation reasons for order.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76b6fc1a-65b2-4f79-baba-e17951e2ebae",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"//Check that all required statuses are present",
									"tests[\"Body matches LICENSING_ISSUE\"] = responseBody.has(\"LICENSING_ISSUE\");",
									"tests[\"Body matches ALTERNATE_DELIVERY\"] = responseBody.has(\"ALTERNATE_DELIVERY\");",
									"tests[\"Body matches INCORRECT_TITLE\"] = responseBody.has(\"INCORRECT_TITLE\");",
									"tests[\"Body matches INVALID_ORDER_DATA\"] = responseBody.has(\"INVALID_ORDER_DATA\");",
									"",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 7 statuses\"] = jsonData.length === 4;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/order/cancellationReason",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"order",
								"cancellationReason"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all possible statuses for deliverable.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18de0cba-8d87-4d98-bca8-967dcde3dd49",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"",
									"//Check that all required statuses are present",
									"tests[\"Body matches PENDING\"] = responseBody.has(\"PENDING\");",
									"tests[\"Body matches IN_PROGRESS\"] = responseBody.has(\"IN_PROGRESS\");",
									"tests[\"Body matches COMPLETED\"] = responseBody.has(\"COMPLETED\");",
									"tests[\"Body matches CANCELED\"] = responseBody.has(\"CANCELED\");",
									"tests[\"Body matches FAILED\"] = responseBody.has(\"FAILED\");",
									"",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 7 statuses\"] = jsonData.length === 5;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/deliverable/status",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"deliverable",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all possible delivery types for delivery job.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "323c317b-48cb-4182-9d30-bf5815e0e075",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"",
									"//Check that all required statuses are present",
									"tests[\"Body matches AUTOMATIC\"] = responseBody.has(\"AUTOMATIC\");",
									"tests[\"Body matches MANUAL_PASS_THROUGH\"] = responseBody.has(\"MANUAL_PASS_THROUGH\");",
									"tests[\"Body matches TRANSCODE_PASS_THROUGH\"] = responseBody.has(\"TRANSCODE_PASS_THROUGH\");",
									"",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 7 statuses\"] = jsonData.length === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/deliveryjob/type",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"deliveryjob",
								"type"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all possible stages for deliverable.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2c76627-b1cc-4f2e-97a3-fc876c5b9c70",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"",
									"//Check that all required statuses are present",
									"tests[\"Body matches NOT_YET_STARTED\"] = responseBody.has(\"NOT_YET_STARTED\");",
									"tests[\"Body matches AWAITING_SOURCES\"] = responseBody.has(\"AWAITING_SOURCES\");",
									"tests[\"Body matches READY_FOR_TRANSCODING\"] = responseBody.has(\"READY_FOR_TRANSCODING\");",
									"tests[\"Body matches TRANSCODING\"] = responseBody.has(\"TRANSCODING\");",
									"tests[\"Body matches READY_FOR_PACKAGING\"] = responseBody.has(\"READY_FOR_PACKAGING\");",
									"tests[\"Body matches PACKAGING\"] = responseBody.has(\"PACKAGING\");",
									"tests[\"Body matches READY_FOR_DELIVERY\"] = responseBody.has(\"READY_FOR_DELIVERY\");",
									"tests[\"Body matches DELIVERING\"] = responseBody.has(\"DELIVERING\");",
									"tests[\"Body matches DELIVERED\"] = responseBody.has(\"DELIVERED\");",
									"tests[\"Body matches ABORTED\"] = responseBody.has(\"ABORTED\");",
									"",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 7 statuses\"] = jsonData.length === 10;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/deliverable/stage",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"deliverable",
								"stage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all possible draft types.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37177528-3da7-4f92-a437-80e79c7be3a4",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"",
									"//Check that all required statuses are present",
									"tests[\"Body matches USER\"] = responseBody.has(\"USER\");",
									"tests[\"Body matches SYSTEM\"] = responseBody.has(\"SYSTEM\");",
									"",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 7 statuses\"] = jsonData.length === 2;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/draftorder/type",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"draftorder",
								"type"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all possible cancellation reasons for delivery job.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3a015a0-0c1c-404c-9615-269a4bd234cd",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"",
									"//Check that all required statuses are present",
									"tests[\"Body matches LICENSING_ISSUE\"] = responseBody.has(\"LICENSING_ISSUE\");",
									"tests[\"Body matches ALTERNATE_DELIVERY\"] = responseBody.has(\"ALTERNATE_DELIVERY\");",
									"tests[\"Body matches INCORRECT_TITLE\"] = responseBody.has(\"INCORRECT_TITLE\");",
									"tests[\"Body matches INVALID_ORDER_DATA\"] = responseBody.has(\"INVALID_ORDER_DATA\");",
									"",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 7 statuses\"] = jsonData.length === 4;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/deliveryjob/cancellationReason",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"deliveryjob",
								"cancellationReason"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all possible statuses for order.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2d23089-ce90-4ea1-a9aa-4ac7fec098e0",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"//Check that all required statuses are present",
									"tests[\"Body matches RECEIVED\"] = responseBody.has(\"RECEIVED\");",
									"tests[\"Body matches IN_PROGRESS\"] = responseBody.has(\"IN_PROGRESS\");",
									"tests[\"Body matches COMPLETED\"] = responseBody.has(\"COMPLETED\");",
									"tests[\"Body matches REJECTED\"] = responseBody.has(\"REJECTED\");",
									"tests[\"Body matches FAILED\"] = responseBody.has(\"FAILED\");",
									"tests[\"Body matches CANCELED\"] = responseBody.has(\"CANCELED\");",
									"tests[\"Body matches AWAITING_SOURCES\"] = responseBody.has(\"AWAITING_SOURCES\");",
									"tests[\"Body matches AWAITING_INPUT\"] = responseBody.has(\"AWAITING_INPUT\");",
									"console.log(\"Response: \"+responseBody);",
									"//check Json Parse",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Has 8 statuses\"] = jsonData.length === 8;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/order/status",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"order",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all information regarding job types.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "77b3da42-5881-4599-986d-4116d9decc8d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cb4364a-176d-4d86-b2e9-ee630e7f504f",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"console.log(\"Response: \"+responseBody);",
									"//Check that all required statuses are present",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//check Localization",
									"var Localization = jsonData.Localization;",
									"tests[\"Localization has correct jobKey\"] = Localization.jobKey === \"localizationjobs\";",
									"//check Licensing",
									"var Licensing = jsonData.Licensing;",
									"tests[\"Licensing has correct jobKey\"] = Licensing.jobKey === \"licensingjobs\";",
									"//check Delivery ",
									"var Delivery = jsonData.Delivery;",
									"tests[\"Delivery has correct subTypeField\"] = Delivery.subTypeField === \"DeliveryJobType\";",
									"tests[\"Delivery has correct jobKey\"] = Delivery.jobKey === \"deliveryjobs\";",
									"var subTypes = Delivery.subTypes;",
									"//check Subtypes count",
									"tests[\"subTypes has 3 objects\"] = subTypes.length === 3;",
									"//check Subtypes AUTOMATIC",
									"tests[\"First subTypes is AUTOMATIC\"] = subTypes[0].value === \"AUTOMATIC\";",
									"tests[\"First subTypes has label 'Automated'\"] = subTypes[0].label === \"Automated\";",
									"//check Subtypes MANUAL_PASS_THROUGH",
									"tests[\"Second subTypes is MANUAL_PASS_THROUGH\"] = subTypes[1].value === \"MANUAL_PASS_THROUGH\";",
									"tests[\"Second subTypes has label 'Pass Through'\"] = subTypes[1].label === \"Pass Through\";",
									"//check Subtypes TRANSCODE_PASS_THROUGH",
									"tests[\"Third subTypes is TRANSCODE_PASS_THROUGH\"] = subTypes[2].value === \"TRANSCODE_PASS_THROUGH\";",
									"tests[\"Third subTypes has label 'Transcode Pass Through'\"] = subTypes[2].label === \"Transcode Pass Through\";",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/consts/job/types",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"consts",
								"job",
								"types"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5f754571-3c7d-4018-9c70-bfca1af527d1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e0c29107-049c-4d6b-91ca-ca738e1daf0e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "LicensingJobs",
			"item": [
				{
					"name": "Creates new licensing job using provided data. Skip no tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aadc5ad7-8c09-42cf-aa6d-9748a19088eb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/licensingjobs",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"licensingjobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Performs search query for licensing jobs.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79bc6039-a1fe-4646-b6b8-993854d1e02d",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var resultCount = parseInt(pm.environment.get(\"PageSize\"));",
									"//Check that all required statuses are present",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//check Jobs count",
									"var Results = jsonData.results;",
									"if (jsonData.totalCount >= resultCount)  tests[\"Check Page size\"] = Results.length === resultCount;  ",
									"",
									"//check that license job is license job =)",
									"for (var count = 0; count < Results.length; count++)",
									"{",
									"    var LicenseJob = Results[count];",
									"    tests[\"Validate license \"+count] = LicenseJob.urn.includes(\"licensingjob\");",
									"}",
									"",
									"pm.environment.set(\"License\", Results[0]);",
									"pm.environment.set(\"LicenseVersion\", Results[0].version-1);",
									"pm.environment.set(\"LicenseId\", Results[0].id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pageIndex\": 0,\r\n  \"pageSize\": {{PageSize}},\r\n  \"query\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/licensingjobs/find",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"licensingjobs",
								"find"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns full information about specified licensing job.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4c2d83e4-9e2b-4408-8a00-df0105997bf7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8a989a54-e9e6-4589-97d5-22f82196502a",
								"exec": [
									"//Check Status Code",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"//Check each property",
									"if (responseCode.code === 200)",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"var FindLicense = pm.environment.get(\"License\");",
									"var properties = Object.getOwnPropertyNames(FindLicense);",
									"for (var count = 0; count < properties.length; count++)",
									"{",
									"    var property = properties[count];",
									"    tests[\"Validate property: \"+ property] = FindLicense.property == jsonData.property;",
									"}",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/licensingjobs/{{LicenseId}}",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"licensingjobs",
								"{{LicenseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns entity change for specified licensing job and entity version.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ab9250cb-6d69-424a-b468-d025bfd64a07",
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "de0f5592-230d-4f0d-9d59-0aa4b366c69e",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"if (responseCode.code === 200)",
									"{",
									"var baseVersion = parseInt(pm.environment.get(\"LicenseVersion\"));",
									"var LicenseId = pm.environment.get(\"LicenseId\");",
									"var jsonData = JSON.parse(responseBody);",
									"var entity = jsonData.entity;",
									"",
									"",
									"tests[\"BaseVersion is correct\"] = jsonData.baseVersion === baseVersion;",
									"tests[\"Id is correct\"] = jsonData.id == (LicenseId + '.'+ baseVersion);",
									"tests[\"Entity Id is correct\"] = entity.Id == LicenseId;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/licensingjobs/{{LicenseId}}/history/{{LicenseVersion}}",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"licensingjobs",
								"{{LicenseId}}",
								"history",
								"{{LicenseVersion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of licensing jobs for order.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "56f26e51-057d-463d-b7c1-befabba88d8f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a94ccfb0-81fe-4439-b37e-ab97b5437714",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/licensingjobs/fororder/{{LicenseOrderId}}",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"licensingjobs",
								"fororder",
								"{{LicenseOrderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a range of changes applied to specified licensing job.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d1f90f48-c662-43bc-974f-3c58abed3d2a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5596740e-5513-4e19-ad51-74d16d9bc094",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"if (responseCode.code === 200)",
									"{",
									"var baseVersion = parseInt(pm.environment.get(\"LicenseVersion\"));",
									"var LicenseId = pm.environment.get(\"LicenseId\");",
									"var LicenseOrderId = pm.environment.get(\"LicenseOrderId\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"for (var count = 0; count < jsonData.totalCount; count++)",
									"{",
									"    var entity = jsonData.results[count].entity;",
									"    tests[\"Validate record id for record \"+ count] = jsonData.results[count].id == (LicenseId + '.'+ count);",
									"    tests[\"Validate entity id for record \"+ count] = entity.Id == LicenseId;",
									"    tests[\"Validate entity order id for record \"+ count] = entity.OrderId == LicenseOrderId;",
									"}",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/licensingjobs/{{LicenseId}}/history?take=500",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"licensingjobs",
								"{{LicenseId}}",
								"history"
							],
							"query": [
								{
									"key": "skip",
									"value": "{{skip}}",
									"disabled": true
								},
								{
									"key": "take",
									"value": "500"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DeliveryJobs",
			"item": [
				{
					"name": "Returns all jobs currently blocked by do-not-deliver-before dates.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52c5eda7-9a21-459c-87e5-18408e188f97",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/deliveryjobs/blockedDndb",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"deliveryjobs",
								"blockedDndb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Performs consistency check on all delivery jobs.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3627e6b0-b33a-49cd-9a39-fa287e305dcd",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{OrderAPIHost}}/v1/deliveryjobs/checkAll?fullScan=false",
							"host": [
								"{{OrderAPIHost}}"
							],
							"path": [
								"v1",
								"deliveryjobs",
								"checkAll"
							],
							"query": [
								{
									"key": "fullScan",
									"value": "false"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}